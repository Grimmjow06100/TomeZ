generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model historiquedernierelecture {
  userId     Int
  tomeNumero Int
  lastPage   Int?
  time       DateTime @default(now())
  fin        Boolean  @default(false)
  mangaName  String
  tome       tome     @relation(fields: [mangaName, tomeNumero], references: [mangaName, numero], onDelete: Cascade, map: "HistoriqueDerniereLecture_mangaName_tomeNumero_fkey")
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "HistoriqueDerniereLecture_userId_fkey")

  @@id([userId, mangaName])
  @@index([mangaName, tomeNumero], map: "HistoriqueDerniereLecture_mangaName_tomeNumero_fkey")
}

model manga {
  name        String     @id
  description String     @db.Text
  cover       String     @unique(map: "Manga_cover_key")
  mangatag    mangatag[]
  mylist      mylist[]
  tome        tome[]
}

model mangatag {
  mangaName String
  tagLabel  String
  manga     manga  @relation(fields: [mangaName], references: [name], onDelete: Cascade, map: "MangaTag_mangaName_fkey")
  tag       tag    @relation(fields: [tagLabel], references: [label], onDelete: Cascade, map: "MangaTag_tagLabel_fkey")

  @@id([mangaName, tagLabel])
  @@index([tagLabel], map: "MangaTag_tagLabel_fkey")
}

model mylist {
  userId    Int
  mangaName String
  manga     manga  @relation(fields: [mangaName], references: [name], onDelete: Cascade, map: "Mylist_mangaName_fkey")
  user      user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Mylist_userId_fkey")

  @@id([userId, mangaName])
  @@index([mangaName], map: "Mylist_mangaName_fkey")
}

model session {
  token  String   @id @unique(map: "Session_token_key") @db.VarChar(512)
  userId Int
  ex     DateTime @db.Timestamp(0)
  user   user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model tag {
  label    String     @id
  mangatag mangatag[]
}

model tome {
  mangaName                 String
  numero                    Int
  images                    Json
  cover                     String                      @unique(map: "Tome_cover_key") @default("")
  historiquedernierelecture historiquedernierelecture[]
  manga                     manga                       @relation(fields: [mangaName], references: [name], onDelete: Cascade, map: "Tome_mangaName_fkey")

  @@id([mangaName, numero])
}

model user {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique(map: "User_email_key")
  username                  String                      @unique(map: "User_username_key")
  password                  String
  salt                      String
  historiquedernierelecture historiquedernierelecture[]
  mylist                    mylist[]
  session                   session[]
}
